# Get array of performance metrics
# Each array element is a hash with following key,values pairs:
#  name: Performance metric's name
#  regex: regular expression used to capture perf metric value
#  units: Performance metric's units
#  adj: Optional hash used to escale capture value to appropriate units.
#       The adj is a hash with following keys:
#        val_index: index of capture value in regex above
#        unit_index: index of capture units in regex above
#        val_adj: hash of regex:val. The capture unit value will be check agains regex key, if match value is adjusted by val.
def get_metrics
  perf_metrics = [
   {'name' => 'sr8000_throughput',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|8000\|.+?No\.\sof\sbits\/Sec\s\|\s([\d\.]+)\|',
    'units' => 'bits/sec',
   },
   {'name' => 'sr11025_throughput',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|11025\|.+?No\.\sof\sbits\/Sec\s\|\s([\d\.]+)\|',
    'units' => 'bits/sec',
   },
   {'name' => 'sr16000_throughput',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|16000\|.+?No\.\sof\sbits\/Sec\s\|\s([\d\.]+)\|',
    'units' => 'bits/sec',
   },
   {'name' => 'sr22050_throughput',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|22050\|.+?No\.\sof\sbits\/Sec\s\|\s([\d\.]+)\|',
    'units' => 'bits/sec',
   },
   {'name' => 'sr24000_throughput',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|24000\|.+?No\.\sof\sbits\/Sec\s\|\s([\d\.]+)\|',
    'units' => 'bits/sec',
   },
   {'name' => 'sr32000_throughput',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|32000\|.+?No\.\sof\sbits\/Sec\s\|\s([\d\.]+)\|',
    'units' => 'bits/sec',
   },
   {'name' => 'sr44100_throughput',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|44100\|.+?No\.\sof\sbits\/Sec\s\|\s([\d\.]+)\|',
    'units' => 'bits/sec',
   },
   {'name' => 'sr48000_throughput',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|48000\|.+?No\.\sof\sbits\/Sec\s\|\s([\d\.]+)\|',
    'units' => 'bits/sec',
   },
   {'name' => 'sr88200_throughput',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|88200\|.+?No\.\sof\sbits\/Sec\s\|\s([\d\.]+)\|',
    'units' => 'bits/sec',
   },
   {'name' => 'sr96000_throughput',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|96000\|.+?No\.\sof\sbits\/Sec\s\|\s([\d\.]+)\|',
    'units' => 'bits/sec',
   },
   {'name' => 'sr8000_load',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|8000\|.+?percentage\s+cpu\s+load\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'sr11025_load',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|11025\|.+?percentage\s+cpu\s+load\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'sr16000_load',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|16000\|.+?percentage\s+cpu\s+load\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'sr22050_load',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|22050\|.+?percentage\s+cpu\s+load\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'sr24000_load',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|24000\|.+?percentage\s+cpu\s+load\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'sr32000_load',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|32000\|.+?percentage\s+cpu\s+load\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'sr44100_load',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|44100\|.+?percentage\s+cpu\s+load\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'sr48000_load',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|48000\|.+?percentage\s+cpu\s+load\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'sr88200_load',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|88200\|.+?percentage\s+cpu\s+load\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'sr96000_load',
    'regex' => '\|TRACE\sLOG\|Sampling\sRate\s+\|96000\|.+?percentage\s+cpu\s+load\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
  ]
  perf_metrics
end

