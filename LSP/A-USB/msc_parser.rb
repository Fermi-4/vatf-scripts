# Get array of performance metrics
# Each array element is a hash with following key,values pairs:
#  name: Performance metric's name
#  regex: regular expression used to capture perf metric value
#  units: Performance metric's units
#  adj: Optional hash used to escale capture value to appropriate units.
#       The adj is a hash with following keys:
#        val_index: index of capture value in regex above
#        unit_index: index of capture units in regex above
#        val_adj: hash of regex:val. The capture unit value will be check agains regex key, if match value is adjusted by val.
def get_metrics
  perf_metrics = [
   {'name' => 'write_102400_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|102400\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|write\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Mega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'write_256000_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|256000\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|write\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Mega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'write_512000_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|512000\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|write\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Mega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'write_1048576_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|1048576\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|write\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Mega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'write_5242880_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|5242880\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|write\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Mega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'read_102400_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|102400\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|read\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Mega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'read_256000_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|256000\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|read\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Mega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'read_512000_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|512000\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|read\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Mega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'read_1048576_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|1048576\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|read\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Mega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'read_5242880_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|5242880\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|read\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Mega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'copy_102400_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|102400\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}).+?[\w\s\|]+filecopy\s\|\sMega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'copy_256000_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|256000\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}).+?[\w\s\|]+filecopy\s\|\sMega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'copy_512000_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|512000\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}).+?[\w\s\|]+filecopy\s\|\sMega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'copy_1048576_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|1048576\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}).+?[\w\s\|]+filecopy\s\|\sMega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'copy_5242880_throughput',
    'regex' => 'buffer\s+size\sin\sbytes\|5242880\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}).+?[\w\s\|]+filecopy\s\|\sMega\sBytes\/Sec\s+\|\s+([\d\.]+)\|',
    'units' => 'MBytes/sec',
   },
   {'name' => 'write_102400_cpuload',
    'regex' => 'buffer\s+size\sin\sbytes\|102400\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|write\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}){3}[\w\s\|]+percentage\scpu\sload\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'write_256000_cpuload',
    'regex' => 'buffer\s+size\sin\sbytes\|256000\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|write\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}){3}[\w\s\|]+percentage\scpu\sload\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'write_512000_cpuload',
    'regex' => 'buffer\s+size\sin\sbytes\|512000\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|write\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}){3}[\w\s\|]+percentage\scpu\sload\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'write_1048576_cpuload',
    'regex' => 'buffer\s+size\sin\sbytes\|1048576\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|write\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}){3}[\w\s\|]+percentage\scpu\sload\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'write_5242880_cpuload',
    'regex' => 'buffer\s+size\sin\sbytes\|5242880\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|write\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}){3}[\w\s\|]+percentage\scpu\sload\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'read_102400_cpuload',
    'regex' => 'buffer\s+size\sin\sbytes\|102400\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|read\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}){3}[\w\s\|]+percentage\scpu\sload\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'read_256000_cpuload',
    'regex' => 'buffer\s+size\sin\sbytes\|256000\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|read\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}){3}[\w\s\|]+percentage\scpu\sload\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'read_512000_cpuload',
    'regex' => 'buffer\s+size\sin\sbytes\|512000\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|read\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}){3}[\w\s\|]+percentage\scpu\sload\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'read_1048576_cpuload',
    'regex' => 'buffer\s+size\sin\sbytes\|1048576\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|read\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}){3}[\w\s\|]+percentage\scpu\sload\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
   {'name' => 'read_5242880_cpuload',
    'regex' => 'buffer\s+size\sin\sbytes\|5242880\|[\n\r]{1,2}[^\n]+[\n\r]{1,2}[\w\s\|]+Iomode\|read\|[\n\r]{1,2}(?:[^\n]+[\n\r]{1,2}){3}[\w\s\|]+percentage\scpu\sload\s\|\s([\d\.]+)%\|',
    'units' => '%',
   },
  ]
  perf_metrics
end

