require File.dirname(__FILE__)+'/../../android_test_module'
require File.dirname(__FILE__)+'/../../utils'
require File.dirname(__FILE__)+'/../../../lib/parse_perf_data'

include AndroidTest
include ParsePerfomance

def setup
  self.as(AndroidTest).setup
  android_bin_path = File.join(get_host_android_root_bin_path,"lmbench_binaries/")
  send_adb_cmd("push #{android_bin_path} /system/bin/")
  send_adb_cmd("shell dd if=/dev/zero of=/mnt/sdcard/test1.txt bs=1000000 count=10")
end

def run
  perf_data=[]
  result=''
  get_tests_info.each do |current_test, test_parse_info|
    puts("Running #{current_test} ....")
    data = send_adb_cmd("shell #{current_test}") 
    test_result = get_performance_data(data,test_parse_info)
    if test_result[0]['value'].empty?
      result+="Test failed for #{current_test}.\n"
    else
      perf_data = perf_data + test_result
    end
  end
  if result == ''
    set_result(FrameworkConstants::Result[:pass], "lmbench data collected successfully\n", perf_data)
  else
    set_result(FrameworkConstants::Result[:fail], result, perf_data)
  end
end




def get_tests_info
  {
=begin
    {'name' => 'Latency for 0.50 MB block size',
    'regex' => '0.50000\s*(\d*.\d*)',
    'units' => 'nanosec',
   },
   {'name' => 'Latency for 1.00 MB block size',
    'regex' => '1.00000\s*(\d*.\d*)',
    'units' => 'nanosec',
   },
   {'name' => 'TCP/IP Connection Cost to Localhost',
    'regex' => 'TCP/IP connection cost to localhost\s*:\s*(\d*.\d*)\s*microseconds',
    'units' => 'microsec',
   },
   {'name' => 'Pipe Latency',
    'regex' => 'Pipe latency\s*:\s*(\d*.\d*)\s*microseconds',
    'units' => 'microsec',
   },
   {'name' => 'Process Fork+Exit',
    'regex' => 'Process fork+exit\s*:\s*(\d*.\d*)\s*microseconds',
    'units' => 'microsec',
   },
   {'name' => 'Process Fork+Execve',
    'regex' => 'Process fork+execve\s*:\s*(\d*.\d*)\s*microseconds',
    'units' => 'microsec',
   },
   {'name' => 'Procedure Call',
    'regex' => 'Procedure call\s*:\s*(\d*.\d*)\s*microseconds',
    'units' => 'microsec',
   },
   {'name' => 'Select on 200 TCP FDs',
    'regex' => 'Select on 200 tcp fd\'s\s*:\s*(\d*.\d*)\s*microseconds',
    'units' => 'microsec',
   },
   {'name' => 'Semaphore Latency',
    'regex' => 'Semaphore latency\s*:\s*(\d*.\d*)\s*microseconds',
    'units' => 'microsec',
   },
   {'name' => 'Signal Handler Latency',
    'regex' => 'Signal handler installation\s*:\s*(\d*.\d*)\s*microseconds',
    'units' => 'microsec',
   },
   {'name' => 'Signal Handler Overhead',
    'regex' => 'Signal handler overhead\s*:\s*(\d*.\d*)\s*microseconds',
    'units' => 'microsec',
   },
=end
   'bw_mem 1M rd' => [{'name' => 'bw_mem-rd-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'MB/s',
   }],
   'bw_mem 1M wr' => [{'name' => 'bw_mem-wr-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'MB/s',
   }],
   'bw_mem 1M rdwr' => [{'name' => 'bw_mem-rdwr-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'MB/s',
   }],
   'bw_mem 1M cp' => [{'name' => 'bw_mem-cp-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'MB/s',
   }],
   'bw_mem 1M fwr' => [{'name' => 'bw_mem-fwr-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'MB/s',
   }],
   'bw_mem 1M frd' => [{'name' => 'bw_mem-frd-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'MB/s',
   }],
   'bw_mem 1M fcp' => [{'name' => 'bw_mem-fcp-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'MB/s',
   }],
   'bw_mem 1M bzero' => [{'name' => 'bw_mem-bzero-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'MB/s',
   }],
   'bw_mem 1M bcopy' => [{'name' => 'bw_mem-bcopy-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'MB/s',
   }],
   'bw_unix' => [{'name' => 'bw_unix',
    'regex' => 'AF_UNIX\s+sock\s+stream\s+bandwidth:\s+([\d\.]+)\s+[\w\/]+',
    'units' => 'MB/s',
   }],
   'bw_file_rd 1M open2close /mnt/sdcard/test1.txt' => [{'name' => 'bw_file_rd-o2c-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+).+?',
    'units' => 'MB/s',
   }],
   'bw_file_rd 1M io_only /mnt/sdcard/test1.txt' => [{'name' => 'bw_file_rd-io-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+).+?',
    'units' => 'MB/s',
   }],
   'bw_mmap_rd 1M open2close /mnt/sdcard/test1.txt' => [{'name' => 'bw_mmap_rd-o2c-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+).+?',
    'units' => 'MB/s',
   }],
   'bw_mmap_rd 1M mmap_only /mnt/sdcard/test1.txt' => [{'name' => 'bw_mmap_rd-mo-1MB',
    'regex' => '.+?[\d\.]+\s+([\d\.]+).+?',
    'units' => 'MB/s',
   }],
   'bw_pipe' => [{'name' => 'bw_pipe',
    'regex' => 'Pipe\s+bandwidth:\s+([\d\.]+)\s+[\w\/]+',
    'units' => 'MB/s',
   }],
=begin
   {'name' => 'lat_connect',
    'regex' => '^\|TEST START\|lat_connect\|.+?TCP\/IP\s+connection\s+cost\s+to\s+localhost:\s+([\d\.]+)\s+([\w\/]+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   },
   'lat_fs' => [{'name' => 'lat_fs-0k',
    'regex' => '^\|TEST START\|lat_fs\|.+?0k\s+([\d\.]+)',
    'units' => 'num_files',
   }],
   {'name' => 'lat_fs-1k',
    'regex' => '^\|TEST START\|lat_fs\|.+?1k\s+([\d\.]+)',
    'units' => 'num_files',
   },
   {'name' => 'lat_fs-4k',
    'regex' => '^\|TEST START\|lat_fs\|.+?4k\s+([\d\.]+)',
    'units' => 'num_files',
   },
   {'name' => 'lat_fs-10k',
    'regex' => '^\|TEST START\|lat_fs\|.+?10k\s+([\d\.]+)',
    'units' => 'num_files',
   },
   {'name' => 'lat_ctx-2-128K',
    'regex' => '^\|TEST START\|lat_ctx\|.+?procs\s+\-\s+2\|.{1,2}\|TRACE\sLOG\|\s+?size_in_kbytes\s+\-\s+128K.+?size=.+?ovr=[\d\.]+.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'us',
   },
   {'name' => 'lat_ctx-2-256K',
    'regex' => '^\|TEST START\|lat_ctx\|.+?procs\s+\-\s+2\|.{1,2}\|TRACE\sLOG\|\s+?size_in_kbytes\s+\-\s+256K.+?size=.+?ovr=[\d\.]+.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'us',
   },
   {'name' => 'lat_ctx-4-128K',
    'regex' => '^\|TEST START\|lat_ctx\|.+?procs\s+\-\s+4\|.{1,2}\|TRACE\sLOG\|\s+?size_in_kbytes\s+\-\s+128K.+?size=.+?ovr=[\d\.]+.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'us',
   },
   {'name' => 'lat_ctx-4-256K',
    'regex' => '^\|TEST START\|lat_ctx\|.+?procs\s+\-\s+4\|.{1,2}\|TRACE\sLOG\|\s+?size_in_kbytes\s+\-\s+256K.+?size=.+?ovr=[\d\.]+.+?[\d\.]+\s+([\d\.]+)',
    'units' => 'us',
   },
=end

   'lat_mem_rd 1M 128' => [{'name' => 'lat_mem_rd-stride128-sz50',
    'regex' => '.+?stride=128.{1,2}0.00049\s+([\d\.]+).+?',
    'units' => 'ns',
   },
   {'name' => 'lat_mem_rd-stride128-sz31K',
    'regex' => '.+?stride=128.+?0.03125\s+([\d\.]+).+?',
    'units' => 'ns',
   },
   {'name' => 'lat_mem_rd-stride128-sz62K',
    'regex' => '.+?stride=128.+?0.06250\s+([\d\.]+).+?',
    'units' => 'ns',
   },
   {'name' => 'lat_mem_rd-stride128-sz125K',
    'regex' => '.+?stride=128.+?0.12500\s+([\d\.]+).+?',
    'units' => 'ns',
   },
   {'name' => 'lat_mem_rd-stride128-sz250K',
    'regex' => '.+?stride=128.+?0.25000\s+([\d\.]+).+?',
    'units' => 'ns',
   },
   {'name' => 'lat_mem_rd-stride128-sz500K',
    'regex' => '.+?stride=128.+?0.50000\s+([\d\.]+).+?',
    'units' => 'ns',
   },
   {'name' => 'lat_mem_rd-stride128-sz1000K',
    'regex' => '.+?stride=128.+?1.00000\s+([\d\.]+).+?',
    'units' => 'ns',
   }],
=begin
   'lat_mmap 1M /mnt/sdcard/test1.txt' => [{'name' => 'lat_mmap-1M',
    'regex' => '.+?1.000000\s+([\d\.]+)',
    'units' => 'us',
   }],
=end
   'lat_ops' => [{'name' => 'lat_ops-int-bit',
    'regex' => '^integer\sbit:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-int-add',
    'regex' => '^integer\sadd:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-int-mul',
    'regex' => '^integer\smul:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-int-div',
    'regex' => '^integer\sdiv:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-int-mod',
    'regex' => '^integer\smod:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-int64-bit',
    'regex' => '^int64\sbit:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-int64-add',
    'regex' => '^uint64\sadd:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-int64-mul',
    'regex' => '^int64\smul:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-int64-div',
    'regex' => '^int64\sdiv:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-int64-mod',
    'regex' => '^int64\smod:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-float-add',
    'regex' => '^float\sadd:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-float-mul',
    'regex' => '^float\smul:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-float-div',
    'regex' => '^float\sdiv:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-double-add',
    'regex' => '^double\sadd:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-double-mul',
    'regex' => '^double\smul:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   },
   {'name' => 'lat_ops-double-div',
    'regex' => '^double\sdiv:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 1.0, /micro/ => 1000.0}},
    'units' => 'ns',
   }],
   'lat_pagefault /mnt/sdcard/test1.txt' => [{'name' => 'lat_pagefault',
    'regex' => 'Pagefaults\son\s.+?:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
=begin
   'lat_pipe' => [{'name' => 'lat_pipe',
    'regex' => '.+?Pipe\s+latency:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   'lat_proc fork' => [{'name' => 'lat_proc-fork',
    'regex' => '.+?Process\s+fork\+exit:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   'lat_proc exec' => [{'name' => 'lat_proc-exec',
    'regex' => '.+?Process\s+fork\+execve:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   {'name' => 'lat_proc-procCall',
    'regex' => '^Procedure\scall:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   },
   {'name' => 'lat_sem',
    'regex' => '^Semaphore\slatency:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   },
   {'name' => 'lat_tcp',
    'regex' => '^TCP\slatency\susing\slocalhost:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   },
   {'name' => 'lat_select',
    'regex' => '^Select\son\s200\stcp\sfd\'s:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   },
=end
   'lat_sig  install' => [{'name' => 'lat_sig-install',
    'regex' => '^Signal\shandler\sinstallation:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   'lat_sig  catch' => [{'name' => 'lat_sig-catch',
    'regex' => '^Signal\shandler\soverhead:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   'lat_sig  prot /mnt/sdcard/test1.txt' => [{'name' => 'lat_sig-prot',
    'regex' => '^Protection\sfault:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   'lat_unix' => [{'name' => 'lat_unix',
    'regex' => '^AF_UNIX\ssock\sstream\slatency:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   'lat_syscall fstat /mnt/sdcard/test1.txt' => [{'name' => 'lat_syscall-fstat',
    'regex' => '^Simple\sfstat:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   'lat_syscall stat /mnt/sdcard/test1.txt' => [{'name' => 'lat_syscall-stat',
    'regex' => '^Simple\sstat:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   'lat_syscall open /mnt/sdcard/test1.txt' => [{'name' => 'lat_syscall-open',
    'regex' => '^Simple\sopen\/close:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   'lat_syscall write /mnt/sdcard/test1.txt' => [{'name' => 'lat_syscall-write',
    'regex' => '^Simple\swrite:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   'lat_syscall read /mnt/sdcard/test1.txt' => [{'name' => 'lat_syscall-read',
    'regex' => '^Simple\sread:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
   'lat_syscall null' => [{'name' => 'lat_syscall-null',
    'regex' => '^Simple\ssyscall:\s+([\d\.]+)\s+(\w+)',
    'adj' => {'val_index' => 0, 'units_index' => 1, 'val_adj' => {/nano/ => 0.001, /micro/ => 1.0, /mili/ => 1000.0}},
    'units' => 'us',
   }],
  }
end


